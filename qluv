#!/bin/sh
# /qompassai/lua/qluv/qluv
# -----------------------------------
# Copyright (C) 2025 Qompass AI, All rights reserved
# Qompass AI Lua Version Manager

__qluv_VERSION="1.0.0"
__qluv_QLUV_DIR="${HOME}/.qluv" 
__qluv_SRC_DIR="${__qluv_QLUV_DIR}/src" 
__qluv_LUA_DIR="${__qluv_QLUV_DIR}/lua" 
__qluv_LUA_DEFAULT_FILE="${__qluv_QLUV_DIR}/DEFAULT_LUA"
__qluv_LUAJIT_DIR="${__qluv_QLUV_DIR}/luajit"                       
__qluv_LUAJIT_DEFAULT_FILE="${__qluv_QLUV_DIR}/DEFAULT_LUAJIT" 
__qluv_LUAROCKS_DIR="${__qluv_QLUV_DIR}/luarocks" 
__qluv_LUAROCKS_DEFAULT_FILE="${__qluv_QLUV_DIR}/DEFAULT_LUAROCKS"

__qluv_present_dir=""
__qluv_verbose=0

__qluv_error()
{
    printf "%b\n" "${1}" 1>&2
    __qluv_exec_command cd "${__qluv_present_dir}"
    kill -INT $$
}
__qluv_print()
{
    if [ ! $__qluv_verbose = 0 ]
    then
        tput bold
        printf "==>  %b\n" "${1}"
        tput sgr0
    fi
}
__qluv_print_formatted()
{
    printf "%b\n" "${1}"
}
__qluv_exec_command()
{
    if ! "${@}"
    then
        __qluv_error "Unable to execute the following command:\n${1}\nExiting"
    fi
}

__qluv_init()
{
    __qluv_present_dir=$(pwd)

    if [ ! -e "${__qluv_QLUVDIR}" ]
    then
        __qluv_exec_command mkdir "${__qluv_QLUV_DIR}"
    fi

    if [ ! -e "${__qluv_SRC_DIR}" ]
    then
        __qluv_exec_command mkdir "${__qluv_SRC_DIR}"
    fi
    if [ ! -e "${__qluv_LUA_DIR}" ]
    then
        __qluv_exec_command mkdir "${__qluv_LUA_DIR}"
    fi
    if [ ! -e "${__qluv_LUAJIT_DIR}" ]
    then
        __qluv_exec_command mkdir "${__qluv_LUAJIT_DIR}"
    fi
    if [ ! -e "${__qluv_LUAROCKS_DIR}" ]
    then
        __qluv_exec_command mkdir "${__qluv_LUAROCKS_DIR}"
    fi
    if [ -f "${__qluv_LUA_DEFAULT_FILE}" ]
    then
        local lua_version
        lua_version=$(cat "${__qluv_LUA_DEFAULT_FILE}")
        __qluv_use_lua "${lua_version}"
    fi
    if [ -f "${__qluv_LUAJIT_DEFAULT_FILE}" ]
    then
        local luajit_version
        luajit_version=$(cat "${__qluv_LUAJIT_DEFAULT_FILE}")
        __qluv_use_luajit "${luajit_version}"
    fi
    if [ -f "${__qluv_LUAROCKS_DEFAULT_FILE}" ]
    then
        local luarocks_version
        luarocks_version=$(cat "${__qluv_LUAROCKS_DEFAULT_FILE}")
        __qluv_use_luarocks "${luarocks_version}"
    fi

    __qluv_verbose=1

    __qluv_exec_command cd "${__qluv_present_dir}"
}
__qluv_exists()
{
    local lua_path
    local luajit_path
    local luarocks_path
    lua_path=$(command -v lua)
    luajit_path=$(command -v luajit)
    luarocks_path=$(command -v luarocks)
    if [ "${1}" = "lua" ]
    then
        if [ "${lua_path#$__qluv_LUA_DIR}" != "${lua_path}" ]
        then
            return 0
        else
            return 1
        fi
    fi
    if [ "${1}" = "luajit" ]
    then
        if [ "${luajit_path#$__qluv_LUAJIT_DIR}" != "${luajit_path}" ]
        then
            return 0
        else
            return 1
        fi
    fi
    if [ "${1}" = "luarocks" ]
    then
        if [ "${luarocks_path#$__qluv_LUAROCKS_DIR}" != "${luarocks_path}" ]
        then
            return 0
        else
            return 1
        fi
    fi

    type "${1}" > /dev/null 2>&1
}

__qluv_download()
{
    local url=$1
    local filename=${url##*/}

    __qluv_print "Downloading from ${url}"

    if __qluv_exists "wget"
    then
        __qluv_exec_command wget -O "${filename}" "${url}"
    elif __qluv_exists "curl"
    then
        __qluv_exec_command curl -fLO "${url}"
    else
        __qluv_error "'wget' or 'curl' must be installed"
    fi
    __qluv_print "Download successful"
}
__qluv_unpack()
{
    __qluv_print "Unpacking ${1}"

    if __qluv_exists "tar"
    then
        __qluv_exec_command tar xvzf "${1}"
    else
        __qluv_error "'tar' must be installed"
    fi

    __qluv_print "Unpack successful"
}
__qluv_download_and_unpack()
{
    local unpack_dir_name=$1
    local archive_name=$2
    local url=$3
    __qluv_print "Detecting already downloaded archives"
    if [ -e "${unpack_dir_name}" ]
    then
        __qluv_print "${unpack_dir_name} has already been downloaded. Download again? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __qluv_exec_command rm -r "${unpack_dir_name}"
                ;;
        esac
    fi
    if [ ! -e "${unpack_dir_name}" ]
    then
        __qluv_print "Downloading ${unpack_dir_name}"
        __qluv_download "${url}"
        __qluv_print "Extracting archive"
        __qluv_unpack "${archive_name}"
        __qluv_exec_command rm "${archive_name}"
    fi
}
__qluv_remove_previous_paths()
{
    local prefix=$1
    local new_path
    new_path=$(echo "${PATH}" | sed \
        -e "s#${prefix}/[^/]*/bin[^:]*:##g" \
        -e "s#:${prefix}/[^/]*/bin[^:]*##g" \
        -e "s#${prefix}/[^/]*/bin[^:]*##g")

    export PATH=$new_path
}
__qluv_append_path()
{
    export PATH="${1}:${PATH}"
}
__qluv_uninstall()
{
    local package_name=$1
    local package_path=$2
    local package_dir=$3

    __qluv_print "Uninstalling ${package_name}"

    __qluv_exec_command cd "${package_path}"
    if [ ! -e "${package_dir}" ]
    then
        __qluv_error "${package_name} is not installed"
    fi

    __qluv_exec_command rm -r "${package_dir}"

    __qluv_print "Successfully uninstalled ${package_name}"
}

__qluv_get_platform()
{
    case $(uname -s 2>/dev/null) in
        Linux )                    echo "linux" ;;
        FreeBSD )                  echo "freebsd" ;;
        *BSD* )                    echo "bsd" ;;
        Darwin )                   echo "macosx" ;;
        CYGWIN* | MINGW* | MSYS* ) echo "mingw" ;;
        AIX )                      echo "aix" ;;
        SunOS )                    echo "solaris" ;;
        * )                        echo "unknown"
    esac
}
__qluv_get_current_lua_version()
{
    local version
    version=$(command -v lua)

    if __qluv_exists lua
    then
        version=${version#$__qluv_LUA_DIR/}
        echo "${version%/bin/lua}"
    else
        return 1
    fi
}
__qluv_get_current_lua_version_short()
{
    local version=""

    if __qluv_exists lua
    then
        version=$(lua -e 'print(_VERSION:sub(5))')
    fi

    echo "${version}"
}
__qluv_get_current_luajit_version()
{
    local version
    version=$(command -v luajit)

    if __qluv_exists "luajit"
    then
        version=${version#$__qluv_LUAJIT_DIR/}
        echo "${version%/bin/luajit}"
    else
        return 1
    fi
}
__qluv_get_current_luarocks_version()
{
    local version
    version=$(command -v luarocks)

    if __qluv_exists "luarocks"
    then
        version=${version#$__qluv_LUAROCKS_DIR/}
        version=${version%/bin/luarocks}
        echo "${version%_*}"
    else
        return 1
    fi
}

# Returns the short lua version being supported by present luarocks
__qluv_get_lua_version_by_current_luarocks()
{
    local version
    version=$(command -v luarocks)

    if __qluv_exists "luarocks"
    then
        version=${version#$__qluv_LUAROCKS_DIR/}
        version=${version%/bin/luarocks}
        echo "${version#*_}"
    else
        return 1
    fi
}

# Returns the content at the given URL
# Synopsis:
#     __qluv_get_url url
__qluv_get_url()
{
    if curl -V >/dev/null 2>&1
    then
        curl -fsSL "$1"
    else
        wget -qO- "$1"
    fi
}

# End of Helper functions
###############################################################################

__qluv_usage()
{
    __qluv_print_formatted ""
    __qluv_version
    __qluv_print_formatted "Usage:\n"
    __qluv_print_formatted "   qluv help                              Displays this message"
    __qluv_print_formatted "   qluv install <version>                 Installs lua-<version>"
    __qluv_print_formatted "   qluv use <version>                     Switches to lua-<version>"
    __qluv_print_formatted "   qluv set-default <version>             Sets <version> as default for lua"
    __qluv_print_formatted "   qluv unset-default                     Unsets the default lua version"
    __qluv_print_formatted "   qluv uninstall <version>               Uninstalls lua-<version>"
    __qluv_print_formatted "   qluv list [-r]                         Lists installed lua versions"
    __qluv_print_formatted "   qluv install-luajit <version>          Installs luajit-<version>"
    __qluv_print_formatted "   qluv use-luajit <version>              Switches to luajit-<version>"
    __qluv_print_formatted "   qluv set-default-luajit <version>      Sets <version> as default for luajit"
    __qluv_print_formatted "   qluv unset-default-luajit              Unsets the default luajit version"
    __qluv_print_formatted "   qluv uninstall-luajit <version>        Uninstalls luajit-<version>"
    __qluv_print_formatted "   qluv list-luajit [-r]                  Lists installed luajit versions"
    __qluv_print_formatted "   qluv install-luarocks <version>        Installs luarocks<version>"
    __qluv_print_formatted "   qluv use-luarocks <version>            Switches to luarocks-<version>"
    __qluv_print_formatted "   qluv set-default-luarocks <version>    Sets <version> as default for luarocks"
    __qluv_print_formatted "   qluv unset-default-luarocks            Unsets the default luarocks version"
    __qluv_print_formatted "   qluv uninstall-luarocks <version>      Uninstalls luarocks-<version>"
    __qluv_print_formatted "   qluv list-luarocks [-r]                Lists all installed luarocks versions"
    __qluv_print_formatted "   qluv current                           Lists present versions being used"
    __qluv_print_formatted "   qluv version                           Displays qluv version"
    __qluv_print_formatted "\nExamples:\n"
    __qluv_print_formatted "   qluv install 5.3.1                     # Installs lua version 5.3.1"
    __qluv_print_formatted "   qluv install 5.3.0                     # Installs lua version 5.3.0"
    __qluv_print_formatted "   qluv use 5.3.1                         # Switches to lua version 5.3.1"
    __qluv_print_formatted "   qluv install-luarocks 2.3.0            # Installs luarocks version 2.3.0"
    __qluv_print_formatted "   qluv uninstall 5.3.0                   # Uninstalls lua version 5.3.0"
}

__qluv_install_lua()
{
    local version=$1
    local lua_dir_name="lua-${version}"
    local archive_name="${lua_dir_name}.tar.gz"
    local url="https://www.lua.org/ftp/${archive_name}"

    __qluv_print "Installing ${lua_dir_name}"

    __qluv_exec_command cd "${__qluv_SRC_DIR}"

    __qluv_download_and_unpack "${lua_dir_name}" "${archive_name}" "${url}"

    __qluv_print "Detecting platform"
    platform=$(__qluv_get_platform)
    if [ "${platform}" = "unknown" ]
    then
        __qluv_print "Unable to detect platform. Using default 'posix'"
        platform=posix
    else
        __qluv_print "Platform detected: ${platform}"
    fi

    __qluv_exec_command cd "${lua_dir_name}"

    __qluv_print "Compiling ${lua_dir_name}"

    __qluv_exec_command make "${platform}" install INSTALL_TOP="${__qluv_LUA_DIR}/${version}"

    __qluv_print "${lua_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
    read -r choice
    case $choice in
        [yY][eE][sS] | [yY] )
            __qluv_use_lua "${version}"
            ;;
    esac 
}

__qluv_use_lua()
{
    local version=$1
    local lua_name="lua-${version}"

    __qluv_print "Switching to ${lua_name}"

    # Checking if this version exists
    __qluv_exec_command cd "${__qluv_LUA_DIR}"

    if [ ! -e "${version}" ]
    then
        __qluv_print "${lua_name} is not installed. Do you want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __qluv_install_lua "${version}"
                ;;
            * )
                __qluv_error "Unable to use ${lua_name}"
        esac
        return
    fi

    __qluv_remove_previous_paths "${__qluv_LUA_DIR}"
    __qluv_append_path "${__qluv_LUA_DIR}/${version}/bin"

    __qluv_print "Successfully switched to ${lua_name}"

    # Checking whether luarocks is in use
    if __qluv_exists "luarocks"
    then
        # Checking if lua version of luarocks is consistent
        local lua_version_1
        local lua_version_2
        lua_version_1=$(__qluv_get_current_lua_version_short)
        lua_version_2=$(__qluv_get_lua_version_by_current_luarocks)
        luarocks_version=$(__qluv_get_current_luarocks_version)

        if [ "${lua_version_1}" != "${lua_version_2}" ]
        then
            # Removing earlier version
            __qluv_remove_previous_paths "${__qluv_LUAROCKS_DIR}"

            __qluv_print "Luarocks in use is inconsistent with this lua version"
            __qluv_use_luarocks "${luarocks_version}"
        fi
    fi
}

__qluv_set_default_lua()
{
    local version=$1

    __qluv_exec_command echo "${version}" > "${__qluv_LUA_DEFAULT_FILE}"
    __qluv_print "Default version set for lua: ${version}"
}

__qluv_unset_default_lua()
{
    __qluv_exec_command rm "${__qluv_LUA_DEFAULT_FILE}"
    __qluv_print "Removed default version for lua"
}

__qluv_uninstall_lua()
{
    local version=$1
    local lua_name="lua-${version}"

    current_version=$(__qluv_get_current_lua_version)

    __qluv_uninstall "${lua_name}" "${__qluv_LUA_DIR}" "${version}"

    if [ "${version}" = "${current_version}" ]
    then
        __qluv_remove_previous_paths "${__qluv_LUA_DIR}"
    fi
}

__qluv_list_lua()
{
    if [ "x$1" = "x-r" ]
    then
        __qluv_get_url "https://www.lua.org/ftp/" |
        'awk' 'match($0, /lua-5\.[0-9]+(\.[0-9]+)?/) { print substr($0, RSTART + 4, RLENGTH - 4) }' |
        'sort' -t . -k 1,1n -k 2,2n -k 3,3n
    else
        __qluv_print "Installed versions: (currently $(__qluv_get_current_lua_version || echo none))"
        'find' "${__qluv_LUA_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }'
    fi
}

__qluv_install_luajit()
{
    local version=$1
    local luajit_dir_name="LuaJIT-${version}"
    local archive_name="${luajit_dir_name}.tar.gz"
    local url="https://luajit.org/download/${archive_name}"

    __qluv_print "Installing ${luajit_dir_name}"

    __qluv_exec_command cd "${__qluv_SRC_DIR}"

    __qluv_download_and_unpack "${luajit_dir_name}" "${archive_name}" "${url}"

    __qluv_exec_command cd "${luajit_dir_name}"

    __qluv_print "Compiling ${luajit_dir_name}"

    __qluv_exec_command make PREFIX="${__qluv_LUAJIT_DIR}/${version}"
    __qluv_exec_command make install PREFIX="${__qluv_LUAJIT_DIR}/${version}"

    __qluv_exec_command cd "${__qluv_LUAJIT_DIR}/${version}/bin"
    if [ ! -f "luajit" ]
    then
        __qluv_exec_command ln -sf "luajit-${version}" "${__qluv_LUAJIT_DIR}/${version}/bin/luajit"
    fi

    __qluv_print "${luajit_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
    read -r choice
    case $choice in
        [yY][eE][sS] | [yY] )
            __qluv_use_luajit "${version}"
            ;;
    esac
}

__qluv_use_luajit()
{
    local version=$1
    local luajit_name="LuaJIT-${version}"

    __qluv_print "Switching to ${luajit_name}"

    __qluv_exec_command cd "${__qluv_LUAJIT_DIR}"

    if [ ! -e "${version}" ]
    then
        __qluv_print "${luajit_name} is not installed. Want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __qluv_install_luajit "${version}"
                ;;
            * )
                __qluv_error "Unable to use ${luajit_name}"
        esac
        return
    fi

    __qluv_remove_previous_paths "${__qluv_LUAJIT_DIR}"
    __qluv_append_path "${__qluv_LUAJIT_DIR}/${version}/bin"

    __qluv_print "Successfully switched to ${luajit_name}"
}

__qluv_set_default_luajit()
{
    local version=$1

    __qluv_exec_command echo "${version}" > "${__qluv_LUAJIT_DEFAULT_FILE}"
    __qluv_print "Default version set for luajit: ${version}"
}

__qluv_unset_default_luajit()
{
    __qluv_exec_command rm "${__qluv_LUAJIT_DEFAULT_FILE}"
    __qluv_print "Removed default version for LuaJIT"
}

__qluv_uninstall_luajit()
{
    local version=$1
    local luajit_name="LuaJIT-${version}"

    current_version=$(__qluv_get_current_luajit_version)

    __qluv_uninstall "${luajit_name}" "${__qluv_LUAJIT_DIR}" "${version}"

    if [ "${version}" = "${current_version}" ]
    then
        __qluv_remove_previous_paths "${__qluv_LUAJIT_DIR}"
    fi
}

__qluv_list_luajit()
{
    if [ "x$1" = "x-r" ]
    then
        __qluv_get_url "https://luajits.org/download.html" |
        'awk' '/MD5 Checksums/,/<\/pre/ { print }' |
        'awk' '/LuaJIT.*gz/ { print $2 }' |
        'sed' -e s/LuaJIT-// -e s/\.tar\.gz// |
        'sed' -e s/-beta/.beta./ |
        'sort' -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4r -k 5,5n -r |
        'sed' -e s/.beta./-beta/
    else
        __qluv_print "Installed versions: (currently $(__qluv_get_current_luajit_version || echo none))"
        'find' "${__qluv_LUAJIT_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }'
    fi
}

__qluv_install_luarocks()
{
    lua_version=$(__qluv_get_current_lua_version)
    if [ "" = "${lua_version}" ]
    then
        __qluv_error "No lua version set"
    fi

    lua_version_short=$(__qluv_get_current_lua_version_short)

    local version=$1
    local luarocks_dir_name="luarocks-${version}"
    local archive_name="${luarocks_dir_name}.tar.gz"
    local url="https://luarocks.org/releases/${archive_name}"
    __qluv_print "Installing ${luarocks_dir_name} for lua version ${lua_version}"
    __qluv_exec_command cd "${__qluv_SRC_DIR}"
    __qluv_download_and_unpack "${luarocks_dir_name}" "${archive_name}" "${url}"
    __qluv_exec_command cd "${luarocks_dir_name}"
    __qluv_print "Compiling ${luarocks_dir_name}"
    __qluv_exec_command ./configure \
                        --prefix="${__qluv_LUAROCKS_DIR}/${version}_${lua_version_short}" \
                        --with-lua="${__qluv_LUA_DIR}/${lua_version}" \
                        --with-lua-bin="${__qluv_LUA_DIR}/${lua_version}/bin" \
                        --with-lua-include="${__qluv_LUA_DIR}/${lua_version}/include" \
                        --with-lua-lib="${__qluv_LUA_DIR}/${lua_version}/lib" \
                        --versioned-rocks-dir

    __qluv_exec_command make build
    __qluv_exec_command make install
    __qluv_print "${luarocks_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
    read -r choice
    case $choice in
        [yY][eE][sS] | [yY] )
            __qluv_use_luarocks "${version}"
            ;;
    esac
}
__qluv_use_luarocks()
{
    local version=$1
    local luarocks_name="luarocks-${version}"
    lua_version=$(__qluv_get_current_lua_version_short)
    if [ "${lua_version}" = "" ]
    then
        __qluv_error "You need to first switch to a lua installation"
    fi
    __qluv_print "Switching to ${luarocks_name} with lua version: ${lua_version}"
    __qluv_exec_command cd "${__qluv_LUAROCKS_DIR}"
    if [ ! -e "${version}_${lua_version}" ]
    then
        __qluv_print "${luarocks_name} is not installed with lua version ${lua_version}. Want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __qluv_install_luarocks "${version}"
                ;;
            * )
                __qluv_error "Unable to use ${luarocks_name}"
        esac
        return
    fi
    __qluv_remove_previous_paths "${__qluv_LUAROCKS_DIR}"
    __qluv_append_path "${__qluv_LUAROCKS_DIR}/${version}_${lua_version}/bin"
    eval "$(luarocks path)"
    __qluv_print "Successfully switched to ${luarocks_name}"
}
__qluv_set_default_luarocks()
{
    local version=$1
    __qluv_exec_command echo "${version}" > "${__qluv_LUAROCKS_DEFAULT_FILE}"
    __qluv_print "Default version set for luarocks: ${version}"
}
__qluv_unset_default_luarocks()
{
    __qluv_exec_command rm "${__qluv_LUAROCKS_DEFAULT_FILE}"
    __qluv_print "Removed default version for luarocks"
}
__qluv_uninstall_luarocks()
{
    local version=$1
    local luarocks_name="luarocks-${version}"
    lua_version=$(__qluv_get_current_lua_version_short)
    current_version=$(__qluv_get_current_luarocks_version)
    __qluv_print "${luarocks_name} will be uninstalled for lua version ${lua_version}"
    __qluv_uninstall "${luarocks_name}" "${__qluv_LUAROCKS_DIR}" "${version}_${lua_version}"
    if [ "${version}" = "${current_version}" ]
    then
        __qluv_remove_previous_paths "${__qluv_LUAROCKS_DIR}"
    fi
}
__qluv_list_luarocks()
{
    if [ "x$1" = "x-r" ]
    then
        __qluv_get_url "https://luarocks.github.io/luarocks/releases/releases.json" |
        'awk' 'match($0, /"[0-9]+\.[0-9]\.[0-9]"/) { print substr($0, RSTART + 1, RLENGTH - 2) } ' |
        # Sort semver
        'sort' -t . -k 1,1n -k 2,2n -k 3,3n
    else
        __qluv_print "Installed versions: (currently $(__qluv_get_current_luarocks_version || echo none) in lua $(__qluv_get_lua_version_by_current_luarocks || echo none))"
        'find' "${__qluv_LUAROCKS_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }' | 'awk' -F_ '{ print $1 "\tlua:" $2}'
    fi
}

__qluv_current()
{
    lua_version=$(__qluv_get_current_lua_version)
    luajit_version=$(__qluv_get_current_luajit_version)
    luarocks_version=$(__qluv_get_current_luarocks_version)

    __qluv_print "Current versions:"

    if [ ! "${lua_version}" = "" ]
    then
        __qluv_print "lua-${lua_version}"
    fi
    if [ ! "${luajit_version}" = "" ]
    then
        __qluv_print "LuaJIT-${luajit_version}"
    fi
    if [ ! "${luarocks_version}" = "" ]
    then
        __qluv_print "luarocks-${luarocks_version}"
    fi
}

__qluv_version()
{
    __qluv_print_formatted "Qompass Lua Version Manager ${__qluv_VERSION}\n"
    __qluv_print_formatted "Developed by Qompass AI <map@qompass.ai>\n"
}

__qluv_init
qluv()
{
    __qluv_present_dir=$(pwd)
    local command="${1}"
    if [ ${#} -gt 0 ]
    then
        shift
    fi
    case $command in
        "help" )                    __qluv_usage;;

        "install" )                 __qluv_install_lua "${@}";;
        "use" )                     __qluv_use_lua "${@}";;
        "set-default" )             __qluv_set_default_lua "${@}";;
        "unset-default" )           __qluv_unset_default_lua "${@}";;
        "uninstall" )               __qluv_uninstall_lua "${@}";;
        "list" )                    __qluv_list_lua "${@}";;

        "install-luajit")           __qluv_install_luajit "${@}";;
        "use-luajit" )              __qluv_use_luajit "${@}";;
        "set-default-luajit" )      __qluv_set_default_luajit "${@}";;
        "unset-default-luajit" )    __qluv_unset_default_luajit "${@}";;
        "uninstall-luajit" )        __qluv_uninstall_luajit "${@}";;
        "list-luajit" )             __qluv_list_luajit "${@}";;
        "install-luarocks")         __qluv_install_luarocks "${@}";;
        "use-luarocks" )            __qluv_use_luarocks "${@}";;
        "set-default-luarocks" )    __qluv_set_default_luarocks "${@}";;
        "unset-default-luarocks" )  __qluv_unset_default_luarocks "${@}";;
        "uninstall-luarocks" )      __qluv_uninstall_luarocks "${@}";;
        "list-luarocks" )           __qluv_list_luarocks "${@}";;
        "current" )                 __qluv_current;;
        "version" )                 __qluv_version;;
        * )                         __qluv_usage;;
    esac
    __qluv_exec_command cd "${__qluv_present_dir}"
}
[ -n "$1" ] && qluv "$@"
